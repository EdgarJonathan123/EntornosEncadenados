
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import Logica.Nodo;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\007\000\002\006\007\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\006\004\001\002\000\016\006\004\007" +
    "\010\012\022\013\021\014\014\015\012\001\002\000\004" +
    "\002\000\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\020\002\uffff\006\uffff\007\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\001\002\000\016\006\ufffc\007" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\001\002\000\004" +
    "\021\ufff4\001\002\000\016\006\ufffa\007\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\001\002\000\004\021\ufff5\001\002" +
    "\000\016\006\004\007\037\012\022\013\021\014\014\015" +
    "\012\001\002\000\004\021\033\001\002\000\016\006\ufff9" +
    "\007\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\001\002\000" +
    "\016\006\ufffb\007\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\001\002\000\004\021\ufff6\001\002\000\004\010\023\001" +
    "\002\000\012\016\026\017\025\020\024\021\027\001\002" +
    "\000\006\004\ufff2\011\ufff2\001\002\000\006\004\ufff3\011" +
    "\ufff3\001\002\000\006\004\ufff1\011\ufff1\001\002\000\006" +
    "\004\ufff0\011\ufff0\001\002\000\004\011\031\001\002\000" +
    "\004\004\032\001\002\000\016\006\ufff8\007\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\001\002\000\004\005\034\001" +
    "\002\000\012\016\026\017\025\020\024\021\027\001\002" +
    "\000\004\004\036\001\002\000\016\006\ufff7\007\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\001\002\000\020\002\ufffe" +
    "\006\ufffe\007\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\001" +
    "\002\000\016\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\005\003\004\001\001\000\016\003" +
    "\017\004\014\005\010\006\012\007\016\011\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\017\005\037\006" +
    "\012\007\016\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public Nodo raiz;

    public TablaError tablaES = TablaError.getInstance();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila=s.left;
        int col = s.right;

        System.out.println("!!!!!!Error sintactico recuperado!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);
        
        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


    //Metodo al que se llama en el momento  en que ya no  es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
        String lexema = s.value.toString();
        int fila = s.right;
        int col = s.left;
        
        System.out.println("!!!!!!Error sintactico, panic mode!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+col);

        tablaES.setError(lexema,fila,col,"Error sintactico","El caracter no esperado");

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {

 
  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("S");
            padre.hijo(a);
            parser.raiz = padre;
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveA llaveC 
            {
              Nodo RESULT =null;
		
            RESULT = new Nodo("BLOQUE");
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llaveA LINSTRUCCIONES llaveC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
            Nodo padre = new Nodo("BLOQUE");
            padre.hijo(a);
            RESULT = padre;
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINSTRUCCIONES ::= LINSTRUCCIONES INSTRUCCION 
            {
              Nodo RESULT =null;
		int padreleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Nodo padre = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                padre.hijo(a);
                RESULT = padre;         
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINSTRUCCIONES ::= INSTRUCCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("LINSTRUCCIONES");
                padre.hijo(a);
                RESULT = padre;
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT =a; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT =a; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT =a; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPRIMIR ::= PSprint parA E parC ptoComa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                Nodo padre = new Nodo("IMPRIMIR");
                padre.hijo(a);
                RESULT=padre;
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= TIPO identificador igual E ptoComa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
                Nodo id = new Nodo("ID",b);
                Nodo padre = new Nodo("DECLARACION", bleft,bright);
                padre.hijo(a);
                padre.hijo(id);
                padre.hijo(c);
                RESULT = padre;
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= PSint 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= new Nodo("int",a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= PSdouble 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= new Nodo("double",a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= PSstring 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= new Nodo("string",a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= entero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT= new Nodo("ENTERO",a,aleft,aright);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= decimal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT= new Nodo("DOBLE",a,aleft,aright);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT= new Nodo("CADENA",a,aleft,aright);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT= new Nodo("ID",a,aleft,aright);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
